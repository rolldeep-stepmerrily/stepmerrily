generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  password    String
  email       String    @unique
  name        String
  phoneNumber String    @unique
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  term    Term?
  profile Profile?
}

model Term {
  id              Int       @id
  isService       Boolean   @default(false)
  isPrivacy       Boolean   @default(false)
  isPrivacyOption Boolean   @default(false)
  isAge           Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  deletedAt       DateTime?

  user User @relation(fields: [id], references: [id])
}

model Profile {
  id        Int       @id
  nickname  String    @unique
  avatar    String?
  status    String?
  musicId   Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  user        User         @relation(fields: [id], references: [id])
  instruments Instrument[]
  bestMusic   Music?       @relation(fields: [musicId], references: [id])
  playlists   Playlist[]
  posts       Post[]
  likes       Like[]
  comments    Comment[]
}

model Playlist {
  id        Int       @id @default(autoincrement())
  name      String
  profileId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  profile Profile @relation(fields: [profileId], references: [id])
  musics  Music[]
}

model Instrument {
  id               Int       @id @default(autoincrement())
  name             String
  classificationId Int
  manufacturer     String
  serialNumber     String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?

  classification Classification @relation(fields: [classificationId], references: [id])
  profiles       Profile[]
}

model Classification {
  id       Int       @id @default(autoincrement())
  name     String
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
  deleteAt DateTime?

  instruments Instrument[]
}

model Music {
  id        Int       @id @default(autoincrement())
  title     String
  albumId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  album     Album      @relation(fields: [albumId], references: [id])
  playlists Playlist[]
  profiles  Profile[]
}

model Album {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  artistId    Int
  releasedAt  DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  artist Artist  @relation(fields: [artistId], references: [id])
  musics Music[]
}

model Artist {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  albums Album[]
}

model Post {
  id        Int       @id @default(autoincrement())
  profileId Int
  title     String
  content   String
  images    String?
  views     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  profile  Profile   @relation(fields: [profileId], references: [id])
  comments Comment[]
  likes    Like[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  profileId Int
  postId    Int
  commentId Int?
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  profile    Profile   @relation(fields: [profileId], references: [id])
  post       Post      @relation(fields: [postId], references: [id])
  reply      Comment?  @relation("comment", fields: [commentId], references: [id])
  reComments Comment[] @relation("comment")
  likes      Like[]
}

model Like {
  id        Int       @id @default(autoincrement())
  profileId Int
  postId    Int?
  commentId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  profile Profile  @relation(fields: [profileId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])
}
